#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mock-server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
io.on('connection', function (socket) {
  socket
      .on('clientMsg', function (msg) {
          console.log('message: ' + msg.rp, `你的socketId为${socket.id}`);
      });

  //客户端请求播放歌曲
  socket.on('playRequest', function (data) {
      console.log(`用户请求播放ID为${data.value}的歌曲`)
      socket.emit("log", {value: "已接收到你的请求"})
      io.to('a').emit('doPlay', data.value);
      console.log("rooms",Object.keys(socket.rooms))
      //socket.emit("doPlay", data.value)
      //转发给播放器端
  });

  socket.on('GroupJoin', function (data) {
    console.log("有用户请求加入到播放器组")
    socket.join("a");
    // [ <socket.id>, 'room 237' ]
  });
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
